#!/usr/bin/env bash
# Web server test for certhing-generated certificates

set -e # Exit on any error
set -u # Error on undefined variables

# Configure colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test directory
TEST_DIR=$(mktemp -d -t certhing-webserver-tests-XXXXXX)
echo -e "${YELLOW}Using test directory: ${TEST_DIR}${NC}"
cd "$TEST_DIR"

# Default port for HTTPS test server
PORT=8443

# Function to clean up test files and stop any running servers
cleanup() {
    echo -e "${YELLOW}Cleaning up and stopping any running servers...${NC}"
    # Try to kill the server if it's running
    if [ -f "server.pid" ]; then
        PID=$(cat server.pid)
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            echo -e "${YELLOW}Stopped server with PID ${PID}${NC}"
        fi
        rm -f server.pid
    fi
    rm -rf "$TEST_DIR"
}

# Register cleanup on exit
trap cleanup EXIT INT TERM

# Function to run tests
run_test() {
    local test_name="$1"
    local command="$2"
    
    echo -e "${YELLOW}Running test: ${test_name}${NC}"
    
    if eval "$command"; then
        echo -e "${GREEN}✓ Test passed: ${test_name}${NC}"
        return 0
    else
        echo -e "${RED}✗ Test failed: ${test_name}${NC}"
        return 1
    }
}

# Check if certhing is available
if ! command -v certhing &> /dev/null; then
    echo -e "${RED}Error: certhing command not found. Is it installed and in your PATH?${NC}"
    exit 1
fi

# Check if OpenSSL is available
if ! command -v openssl &> /dev/null; then
    echo -e "${RED}Error: OpenSSL command not found. It's required for these tests.${NC}"
    exit 1
fi

# Display certhing version
echo -e "${YELLOW}Certhing version:${NC}"
certhing --version

# Step 1: Create a server certificate for localhost
echo -e "${BLUE}===== Creating Server Certificate =====${NC}"
run_test "Create Server Certificate" "certhing --key-type ec --ec-curve p256 --common-name localhost --alt-names localhost,127.0.0.1 --cert-path server.pem --key-path server_key.pem --organization 'Certhing Test' --country 'FI'"

# Step 2: Create a client certificate
echo -e "${BLUE}===== Creating Client Certificate =====${NC}"
run_test "Create Client Certificate" "certhing --cert-type client --key-type ec --ec-curve p256 --common-name client --cert-path client.pem --key-path client_key.pem --organization 'Certhing Test' --country 'FI'"

# Step 3: Create a CA certificate
echo -e "${BLUE}===== Creating CA Certificate =====${NC}"
run_test "Create CA Certificate" "certhing --cert-type ca --key-type ec --ec-curve p384 --common-name 'Certhing Test CA' --cert-path ca.pem --key-path ca_key.pem --organization 'Certhing Test' --country 'FI'"

# Step 4: Create a server certificate signed by the CA
echo -e "${BLUE}===== Creating CA-Signed Server Certificate =====${NC}"
run_test "Create CA-Signed Server Certificate" "certhing --key-type ec --ec-curve p256 --common-name localhost --alt-names localhost,127.0.0.1 --cert-path server_signed.pem --key-path server_signed_key.pem --organization 'Certhing Test' --country 'FI' --self-signed false --ca-cert-path ca.pem --ca-key-path ca_key.pem"

# Step 5: Create a simple HTML file for testing
cat > index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Certhing TLS Test</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1 { color: #333; }
        .success { color: green; font-weight: bold; }
    </style>
</head>
<body>
    <h1>Certhing TLS Test</h1>
    <p class="success">If you can see this page, the TLS certificate is working correctly!</p>
    <p>This is a test page served over HTTPS using a certificate generated by Certhing.</p>
</body>
</html>
EOF

# Function to start a simple HTTPS server using OpenSSL
start_openssl_server() {
    local cert=$1
    local key=$2
    local port=$3
    
    echo -e "${YELLOW}Starting OpenSSL HTTPS server on port ${port}...${NC}"
    
    # Run OpenSSL in the background
    openssl s_server -accept $port -cert $cert -key $key -WWW -no_ssl3 -no_tls1 -no_tls1_1 \
        -verify_return_error &> server.log &
    
    # Save the PID
    echo $! > server.pid
    
    # Wait for server to start
    sleep 2
    
    # Check if server is running
    if ! kill -0 $(cat server.pid) 2>/dev/null; then
        echo -e "${RED}Failed to start OpenSSL server. Check server.log for details.${NC}"
        cat server.log
        return 1
    fi
    
    echo -e "${GREEN}OpenSSL HTTPS server started with PID $(cat server.pid)${NC}"
    return 0
}

# Function to test HTTPS connection using curl
test_https_connection() {
    local url=$1
    local ca_cert=$2
    local client_cert=$3
    local client_key=$4
    local test_name=$5
    
    echo -e "${YELLOW}Testing HTTPS connection to ${url}...${NC}"
    
    local curl_cmd="curl --silent"
    
    # Add CA certificate if provided
    if [ -n "$ca_cert" ]; then
        curl_cmd+=" --cacert $ca_cert"
    else
        curl_cmd+=" -k" # Skip verification if no CA cert
    fi
    
    # Add client certificate if provided
    if [ -n "$client_cert" ] && [ -n "$client_key" ]; then
        curl_cmd+=" --cert $client_cert --key $client_key"
    fi
    
    # Add URL and output redirection
    curl_cmd+=" $url -o curl_response.html"
    
    # Run the command
    if eval "$curl_cmd"; then
        if grep -q "Certhing TLS Test" curl_response.html; then
            echo -e "${GREEN}✓ Test passed: ${test_name}${NC}"
            return 0
        else
            echo -e "${RED}✗ Test failed: ${test_name} - Connection succeeded but content mismatch${NC}"
            return 1
        fi
    else
        echo -e "${RED}✗ Test failed: ${test_name} - Connection failed${NC}"
        return 1
    }
}

# Test with self-signed certificate
echo -e "${BLUE}===== Testing Self-Signed Certificate =====${NC}"
start_openssl_server server.pem server_key.pem $PORT
test_https_connection "https://localhost:$PORT/" "" "" "" "HTTPS with Self-Signed Certificate (Insecure)"

# Stop the server
kill $(cat server.pid)
rm server.pid
sleep 2

# Test with CA-signed certificate
echo -e "${BLUE}===== Testing CA-Signed Certificate =====${NC}"
start_openssl_server server_signed.pem server_signed_key.pem $PORT
test_https_connection "https://localhost:$PORT/" "ca.pem" "" "" "HTTPS with CA-Signed Certificate"

# Stop the server
kill $(cat server.pid)
rm server.pid
sleep 2

# Run OpenSSL client tests
echo -e "${BLUE}===== Testing OpenSSL Client Connection =====${NC}"

# Start the server with the self-signed certificate
start_openssl_server server.pem server_key.pem $PORT

# Test connection with OpenSSL client
echo "GET / HTTP/1.1
Host: localhost

" | openssl s_client -connect localhost:$PORT -quiet -no_ssl3 -no_tls1 -no_tls1_1 \
    -servername localhost -verify_return_error > openssl_response.txt

# Check the response
if grep -q "Certhing TLS Test" openssl_response.txt; then
    echo -e "${GREEN}✓ Test passed: OpenSSL Client with Self-Signed Certificate${NC}"
else
    echo -e "${RED}✗ Test failed: OpenSSL Client with Self-Signed Certificate${NC}"
fi

# Stop the server
kill $(cat server.pid)
rm server.pid
sleep 2

# Start the server with the CA-signed certificate
start_openssl_server server_signed.pem server_signed_key.pem $PORT

# Test connection with OpenSSL client using CA certificate
echo "GET / HTTP/1.1
Host: localhost

" | openssl s_client -connect localhost:$PORT -quiet -no_ssl3 -no_tls1 -no_tls1_1 \
    -CAfile ca.pem -servername localhost -verify_return_error > openssl_response.txt

# Check the response
if grep -q "Certhing TLS Test" openssl_response.txt; then
    echo -e "${GREEN}✓ Test passed: OpenSSL Client with CA-Signed Certificate${NC}"
else
    echo -e "${RED}✗ Test failed: OpenSSL Client with CA-Signed Certificate${NC}"
fi

# Check certificate verification
if grep -q "Verify return code: 0 (ok)" openssl_response.txt; then
    echo -e "${GREEN}✓ Test passed: Certificate Verification${NC}"
else
    echo -e "${RED}✗ Test failed: Certificate Verification${NC}"
    echo -e "${YELLOW}Verification details:${NC}"
    grep "Verify" openssl_response.txt
fi

# Check TLS version and cipher
TLS_INFO=$(grep "Protocol" openssl_response.txt)
CIPHER_INFO=$(grep "Cipher" openssl_response.txt)
echo -e "${YELLOW}TLS Protocol: ${TLS_INFO}${NC}"
echo -e "${YELLOW}Cipher Suite: ${CIPHER_INFO}${NC}"

# Stop the server
kill $(cat server.pid)
rm server.pid

echo -e "${GREEN}All web server tests completed!${NC}"
exit 0